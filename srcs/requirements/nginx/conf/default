server {
#	cet élément demande à Nginx d'écouter sur le port 80
	listen 443 ssl;
	listen [::]:443 ssl;
	
	ssl_protocols TLSv1.2 TLSv1.3;
    ssl_certificate /etc/ssl/certs/nginx.crt;
	ssl_certificate_key /etc/ssl/private/nginx.key;

#	cet élément définit le nom de votre serveur et le bloc serveur, 
#	à utiliser pour les demandes à votre serveur
	server_name piboidin.42.fr;

#	Notre directive root attribue le nom du répertoire racine pour les requêtes à notre serveur. 
#	Ce répertoire, /var/www/html/wordpress, 
#	est créé comme point de montage au moment de la construction en utilisant les instructions du Dockerfile de WordPress. 
#	Ces instructions du Dockerfile garantissent également que les fichiers de version de WordPress sont montés dans ce volume.
	root /var/www/html/wordpress;

#	La directive index spécifie les fichiers à utiliser comme
#	index lors du traitement des requêtes sur votre serveur.
	index index.html index.php index.htm;

#	Dans ce bloc de localisation, nous utiliserons la directive try_files pour vérifier les fichiers, 
#	les fichiers qui correspondent aux requêtes URI individuelles. Au lieu de retourner un statut par défaut de 404 not found, 
#	nous allons passer le contrôle au fichier Wordpress index.php avec les arguments de requête
	location / {
		try_files $uri $uri/ /index.php$is_args$args;
	}

#	Ce bloc d'emplacement va gérer les requêtes PHP et les transmettre par proxy à notre conteneur wordpress. 
#	Puisque notre image Docker WordPress reposera sur l'image php:fpm, 
#	nous ajouterons également les paramètres de configuration appartenant au protocole FastCGI à ce bloc. 
#	Nginx nécessite un processeur PHP indépendant pour les requêtes PHP : 
#	dans notre cas, ces requêtes seront traitées par le processeur php-fpm, qui inclura l'image php:fpm. 
#	De plus, ce bloc d'emplacement contient des directives, variables et options FastCGI, 
#	qui vont proxyer les requêtes pour l'application WordPress qui tourne dans notre conteneur wordpress, 
#	définir l'index préféré de la requête URI capturée, et faire l'analyse de l'URI.
	location ~ [^/]\.php(/|$) { 
		try_files $uri =404;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass wordpress:9000;
		fastcgi_index index.php;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}